// JOOQ 버전 선언
buildscript {
    ext {
        jooqVersion = '3.19.5'
    }
}

plugins {
    id 'nu.studer.jooq' version '9.0'
}

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java", "src/generated"]
        }
    }
}

dependencies {
    // jOOQ 의존성 수동 설정 jooq버전이 낮아서 새로 업데이트할것
    implementation('org.springframework.boot:spring-boot-starter-jooq') {
        exclude group: 'org.jooq:jooq'
    }
    // 원하는 jooq 버전 추가
    implementation "org.jooq:jooq:${jooqVersion}"
    runtimeOnly 'com.mysql:mysql-connector-j'

    jooqGenerator project(":spring-jooq-example:jooq-custom")
    jooqGenerator "org.jooq:jooq:${jooqVersion}"
    jooqGenerator "org.jooq:jooq-meta:${jooqVersion}"
}

tasks.named('test') {
    useJUnitPlatform()
}
// Task 'prepareKotlinBuildScriptModel' not found in project ':spring-jooq-example'. 다른 프로젝트는 안뜨는데 이게 왜뜨지?
tasks.register("prepareKotlinBuildScriptModel") {}

// Jooq 접속 정보 설정
String dbUser = System.properties["db-user"] ?: "root"
String dbPasswd = System.properties["db-passwd"] ?: "passwd"

jooq {
    version = "${jooqVersion}"
    configurations {
        // 설정이름
        sakilaDB {
            generationTool {
                // DB 접속정보
                jdbc {
                    driver = 'com.mysql.cj.jdbc.Driver'
                    url = 'jdbc:mysql://localhost:3306'
                    user = "${dbUser}"
                    password = "${dbPasswd}"
                }
                // 코드 생성기
                generator {
                    // 코틀린쓸 경우 별도 제너레이터 세팅 필요
                    name = 'org.jooq.codegen.DefaultGenerator'

                    database {
                        name = 'org.jooq.meta.mysql.MySQLDatabase'
                        unsignedTypes = true

                        schemata {
                            schema {
                                // DB선택
                                inputSchema = 'sakila'
                            }
                        }
                        forcedTypes {
                            forcedType {
                                userType = 'java.lang.Long'
                                includeTypes = 'int unsigned'
                            }

                            forcedType {
                                userType = 'java.lang.Integer'
                                includeTypes = 'tinyint unsigned'
                            }

                            forcedType {
                                userType = 'java.lang.Integer'
                                includeTypes = 'smallint unsigned'
                            }
                        }
                    }
                    // 옵션 많아서 나중에 좀 더 살펴볼 것
                    generate {
                        // 일부 편의 기능이 있는 DAO 자동 생성
                        daos = true
                        // DB 테이블에 대응되는 Active Record 생성
                        records = true
                        // pojo나 record생성시 setter에서 return값이 void대신 객체 자체 리턴
                        fluentSetters = true
                        // java.time의 타입을 사용하도록함
                        javaTimeTypes = true
                        deprecated = false
                    }

                    target {
                        directory = 'src/generated'
                    }

                    // jooq-custom 내부의 설정
                    // 왜 굳이 서브모듈로 분리하는지?
                    strategy.name = 'com.raon.jooq.custom.generator.JPrefixGeneratorStrategy'
                }
            }
        }
    }
}
